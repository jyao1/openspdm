UINT32 enum SPDM_REQUEST_CODES {
  GET_DIGESTS = 129,            // 0x81 GET_DIGESTS request message format
  GET_CERTIFICATE = 130,        // 0x82 GET_CERTIFICATE request message format
  CHALLENGE = 131,              // 0x83 CHALLENGE request message format
  GET_VERSION = 132,            // 0x84 GET_VERSION request message format
  GET_MEASUREMENTS = 224,       // 0xE0 GET_MEASUREMENTS request message format
  GET_CAPABILITIES = 225,       // 0xE1 GET_CAPABILITIES request message format
  NEGOTIATE_ALGORITHMS = 227,   // 0xE3 NEGOTIATE_ALGORITHMS request message format
  KEY_EXCHANGE,                 // 0xE4 KEY_EXCHANGE request message format
  FINISH,                       // 0xE5 FINISH request message format
  PSK_EXCHANGE,                 // 0xE6 PSK_EXCHANGE request message format
  PSK_FINISH,                   // 0xE7 PSK_FINISH request message format
  HEARTBEAT,                    // 0xE8 HEARTBEAT request message format
  KEY_UPDATE,                   // 0xE9 KEY_UPDATE request message format
  GET_ENCAPSULATED_REQUEST,     // 0xEA GET_ENCAPSULATED_REQUEST request message format
  DELIVER_ENCAPSULATED_RESPONSE,// 0xEB DELIVER_ENCAPSULATED_RESPONSE request message format
  END_SESSION,                  // 0xEC END_SESSION request message format
  VENDOR_DEFINED_REQUEST = 254, // 0xFE VENDOR_DEFINED_REQUEST request message format
  RESPOND_IF_READY = 255,       // 0xFF RESPOND_IF_READY request message format
}

UINT32 enum SPDM_RESPONSE_CODES {
  DIGESTS = 1,                     // 0x01 GET_DIGESTS request message format
  CERTIFICATE = 2,                 // 0x02 GET_CERTIFICATE request message format
  CHALLENGE_AUTH = 3,              // 0x03 CHALLENGE request message format
  VERSION = 4,                     // 0x04 Successful VERSION response message format
  MEASUREMENTS = 96,               // 0x60 Successful MEASUREMENTS response message format
  CAPABILITIES = 97,               // 0x61 Successful CAPABILITIES response message format
  ALGORITHMS = 99,                 // 0x63 Successful ALGORITHMS response message format
  KEY_EXCHANGE_RSP,                // 0x64 Successful KEY_EXCHANGE_RSP response message format
  FINISH_RSP,                      // 0x65 Successful FINISH_RSP response message format
  PSK_EXCHANGE_RSP,                // 0x66 PSK_EXCHANGE_RSP response message format
  PSK_FINISH_RSP,                  // 0x67 Successful PSK_FINISH_RSP response message format
  HEARTBEAT_ACK,                   // 0x68 ENCAPSULATED_RESPONSE_ACK response message format
  KEY_UPDATE_ACK,                  // 0x69 KEY_UPDATE_ACK response message format
  ENCAPSULATED_REQUEST,            // 0x6A ENCAPSULATED_REQUEST response message format
  ENCAPSULATED_RESPONSE_ACK,       // 0x6B ENCAPSULATED_RESPONSE_ACK response message format
  END_SESSION_ACK,                 // 0x6C END_SESSION_ACK response message format
  VENDOR_DEFINED_RESPONSE = 126,   // 0x7E VENDOR_DEFINED_RESPONSE response message format
  ERROR = 127,                     // 0x7F ERROR response message format
}

entrypoint typedef struct _GET_VERSION_REQUEST_MESSAGE {
  UINT8 SPDMVersion;
  UINT8 RequestResponseCode { RequestResponseCode == 0x84 };
  UINT8 Param1;
  UINT8 Param2;
} GET_VERSION_REQUEST_MESSAGE;

entrypoint typedef struct _VersionNumberEntry {
  UINT8 Alpha : 4;
  UINT8 UpdateVersionNumber: 4; // Version of the specification with editorial updates but no functionality additions or changes. Informational; possible errata fixes. Ignore when checking versions for interoperability.
  UINT8 MinorVersion : 4; // Version of the specification with changes that are compatible with functions in earlier minor versions of this major version specification.
  UINT8 MajorVersion: 4;  // Version of the specification with changes that are incompatible with one or more functions in earlier major versions of the specification.
} VersionNumberEntry;

entrypoint typedef struct _SUCCESSFUL_VERSION_RESPONSE_MESSAGE {
  UINT8 SPDMVersion;
  UINT8 RequestResponseCode { RequestResponseCode == 0x04 };
  UINT8 Param1;
  UINT8 Param2;
  UINT8 Reserved;
  UINT8 VersionNumberEntryCount;
  VersionNumberEntry VersionNumberEntries[:byte-size sizeof(VersionNumberEntry)*VersionNumberEntryCount];
} SUCCESSFUL_VERSION_RESPONSE_MESSAGE;

entrypoint typedef struct _REQUESTER_FLAG {
  UINT8 Reserved : 1;
  UINT8 CERT_CAP : 1;
  UINT8 CHAL_CAP : 1;
  UINT8 MEAS_CAP : 2;
  UINT8 MEAS_FRESH_CAP : 1;
  UINT8 ENCRYPT_CAP : 1;
  UINT8 MAC_CAP : 1;
  UINT8 MUT_AUTH_CAP : 1;
  UINT8 KEY_EX_CAP : 1;
  UINT8 PSK_CAP : 2;
  UINT8 ENCAP_CAP : 1;
  UINT8 HBEAT_CAP : 1;
  UINT8 KEY_UPD_CAP : 1;
  UINT8 HANDSHAKE_IN_THE_CLEAR_CAP : 1;
  UINT8 PUB_KEY_ID_CAP : 1;
  UINT8 Reserved1 : 7;
  UINT8 Reserved2 : 8;
} REQUESTER_FLAG;

entrypoint typedef struct _GET_CPABILITIES_REQUEST_MESSAGE {
  UINT8 SPDMVersion;
  UINT8 RequestResponseCode { RequestResponseCode == 0xE1 };
  UINT8 Param1;
  UINT8 Param2;
  UINT8 Reserved;
  UINT8 CTExponent;
  UINT16 Reserved1;
  REQUESTER_FLAG Flags;
} GET_CPABILITIES_REQUEST_MESSAGE;

entrypoint typedef struct _RESPONDER_FLAG {
  UINT8 CACHE_CAP : 1;
  UINT8 CERT_CAP : 1;
  UINT8 CHAL_CAP : 1;
  UINT8 MEAS_CAP : 2;
  UINT8 MEAS_FRESH_CAP : 1;
  UINT8 ENCRYPT_CAP : 1;
  UINT8 MAC_CAP : 1;
  UINT8 MUT_AUTH_CAP : 1;
  UINT8 KEY_EX_CAP : 1;
  UINT8 PSK_CAP : 2;
  UINT8 ENCAP_CAP : 1;
  UINT8 HBEAT_CAP : 1;
  UINT8 KEY_UPD_CAP : 1;
  UINT8 HANDSHAKE_IN_THE_CLEAR_CAP : 1;
  UINT8 PUB_KEY_ID_CAP : 1;
  UINT8 Reserved1 : 7;
  UINT8 Reserved2 : 8;
} RESPONDER_FLAG;

entrypoint typedef struct _SUCCESSFUL_CPABILITIES_RESPONSE_MESSAGE {
  UINT8 SPDMVersion;
  UINT8 RequestResponseCode { RequestResponseCode == 0x61 };
  UINT8 Param1;
  UINT8 Param2;
  UINT8 Reserved;
  UINT8 CTExponent;
  UINT16 Reserved1;
  RESPONDER_FLAG Flags;
} SUCCESSFUL_CPABILITIES_RESPONSE_MESSAGE;

entrypoint typedef struct _EXTENDED_ALGORITHM_FIELD {
  UINT8 RegistryID;
  UINT8 Reserved;
  UINT16 AlgorithmID;
} EXTENDED_ALGORITHM_FIELD;

entrypoint typedef struct _DHE {
  UINT8 AlgType { AlgType == 0x2};
  UINT8 AlgCount;
  UINT16 AlgSupported;
  EXTENDED_ALGORITHM_FIELD AlgExternal[:byte-size sizeof(EXTENDED_ALGORITHM_FIELD)*(AlgCount & 0x0F)];
} DHE;

entrypoint typedef struct _AEAD {
  UINT8 AlgType { AlgType == 0x3};
  UINT8 AlgCount;
  UINT16 AlgSupported;
  EXTENDED_ALGORITHM_FIELD AlgExternal[:byte-size sizeof(EXTENDED_ALGORITHM_FIELD)*(AlgCount & 0x0F)];
} AEAD;

entrypoint typedef struct _ReqBaseAsymAlg {
  UINT8 AlgType { AlgType == 0x4};
  UINT8 AlgCount;
  UINT16 AlgSupported;
  EXTENDED_ALGORITHM_FIELD AlgExternal[:byte-size sizeof(EXTENDED_ALGORITHM_FIELD)*(AlgCount & 0x0F)];
} ReqBaseAsymAlg;

entrypoint typedef struct _KeySchedule {
  UINT8 AlgType { AlgType == 0x5};
  UINT8 AlgCount;
  UINT16 AlgSupported;
  EXTENDED_ALGORITHM_FIELD AlgExternal[:byte-size sizeof(EXTENDED_ALGORITHM_FIELD)*(AlgCount & 0x0F)];
} KeySchedule;

entrypoint typedef struct _NEGOTIATE_ALGORITHMS_REQUEST_MESSAGE {
  UINT8 SPDMVersion;
  UINT8 RequestResponseCode { RequestResponseCode == 0xE3 };
  UINT8 Param1;
  UINT8 Param2;
  UINT16 Length;
  UINT8 MeasurementSpecification;
  UINT8 Reserved;
  UINT32 BaseAsymAlgo;
  UINT32 BaseHashAlgo;
  UINT8 Reserved1[12];
  UINT8 ExtAsymCount;
  UINT8 ExtHashCount;
  UINT16 Reserved2;
  UINT32 ExtAsym[:byte-size sizeof(UINT32)*ExtAsymCount];
  UINT32 ExtHash[:byte-size sizeof(UINT32)*ExtHashCount];
  UINT8 ReqAlgStruct[:byte-size sizeof(DHE)+sizeof(AEAD)+sizeof(ReqBaseAsymAlg)+sizeof(KeySchedule)];
} NEGOTIATE_ALGORITHMS_REQUEST_MESSAGE;

entrypoint typedef struct _SUCCESSFUL_ALGORITHMS_RESPONSE_MESSAGE {
  UINT8 SPDMVersion;
  UINT8 RequestResponseCode { RequestResponseCode == 0x63 };
  UINT8 Param1;
  UINT8 Param2;
  UINT16 Length;
  UINT8 MeasurementSpecificationSel;
  UINT8 Reserved;
  UINT32 MeasurementHashAlgo;
  UINT32 BaseAsymSel;
  UINT32 BaseHashSel;
  UINT8 Reserved1[12];
  UINT8 ExtAsymSelCount ;
  UINT8 ExtHashSelCount;
  UINT16 Reserved2;
  UINT32 ExtAsym[:byte-size sizeof(UINT32)*ExtAsymSelCount];
  UINT32 ExtHash[:byte-size sizeof(UINT32)*ExtHashSelCount];
  UINT8 ReqAlgStruct[:byte-size sizeof(DHE)+sizeof(AEAD)+sizeof(ReqBaseAsymAlg)+sizeof(KeySchedule)];
} SUCCESSFUL_ALGORITHMS_RESPONSE_MESSAGE;

entrypoint typedef struct _GET_CERTIFICATE_REQUEST_MESSAGE {
  UINT8 SPDMVersion;
  UINT8 RequestResponseCode { RequestResponseCode == 0x82 };
  UINT8 Param1;
  UINT8 Param2;
  UINT16 Offset;
  UINT16 Length;
} GET_CERTIFICATE_REQUEST_MESSAGE;

entrypoint typedef struct _SUCCESSFUL_CERTIFICATE_RESPONSE_MESSAGE {
  UINT8 SPDMVersion;
  UINT8 RequestResponseCode { RequestResponseCode == 0x02 };
  UINT8 Param1;
  UINT8 Param2;
  UINT16 PortionLength;
  UINT8 CertChain[:byte-size PortionLength];
} SUCCESSFUL_CERTIFICATE_RESPONSE_MESSAGE;
entrypoint typedef struct _ERROR_RESPONSE_MESSAGE {
  UINT8 SPDMVersion;
  UINT8 RequestResponseCode { RequestResponseCode == 0x7F };
  UINT8 Param1;
  UINT8 Param2;
  UINT8 ExtendedErrorData[:byte-size-at-most 32];
} ERROR_RESPONSE_MESSAGE;

entrypoint typedef struct _RESPOND_IF_READY_REQUEST_MESSAGE {
  UINT8 SPDMVersion;
  UINT8 RequestResponseCode { RequestResponseCode == 0xFF };
  UINT8 Param1;
  UINT8 Param2;
} RESPOND_IF_READY_REQUEST_MESSAGE;

entrypoint typedef struct _VENDOR_DEFINED_REQUEST_REQUEST_MESSAGE {
  UINT8 SPDMVersion;
  UINT8 RequestResponseCode { RequestResponseCode == 0xFE };
  UINT8 Param1;
  UINT8 Param2;
  UINT16 StandardID;
  UINT8 Len;
  UINT8 VendorID[:byte-size Len];
  UINT16 ReqLength;
  UINT8 VendorDefinedReqPayload[:byte-size ReqLength];
} VENDOR_DEFINED_REQUEST_REQUEST_MESSAGE;

entrypoint typedef struct _VENDOR_DEFINED_RESPONSE_RESPONSE_MESSAGE {
  UINT8 SPDMVersion;
  UINT8 RequestResponseCode { RequestResponseCode == 0x7E };
  UINT8 Param1;
  UINT8 Param2;
  UINT16 StandardID;
  UINT8 Len;
  UINT8 VendorID[:byte-size Len];
  UINT16 RespLength;
  UINT8 VendorDefinedRespPayload[:byte-size RespLength];
} VENDOR_DEFINED_RESPONSE_RESPONSE_MESSAGE;
