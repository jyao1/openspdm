// H refers to the output size, in bytes, of the hash algorithm agreed upon in NEGOTIATE_ALGORITHMS .
#define H 256
// S is the size of the asymmetric-signing algorithm output that the Responder selected through the last ALGORITHMS response message to the Requester
#define S 256

UINT32 enum SPDM_REQUEST_CODES {
  GET_DIGESTS = 129,            // 0x81 GET_DIGESTS request message format
  GET_CERTIFICATE = 130,        // 0x82 GET_CERTIFICATE request message format
  CHALLENGE = 131,              // 0x83 CHALLENGE request message format
  GET_VERSION = 132,            // 0x84 GET_VERSION request message format
  GET_MEASUREMENTS = 224,       // 0xE0 GET_MEASUREMENTS request message format
  GET_CAPABILITIES = 225,       // 0xE1 GET_CAPABILITIES request message format
  NEGOTIATE_ALGORITHMS = 227,   // 0xE3 NEGOTIATE_ALGORITHMS request message format
  KEY_EXCHANGE,                 // 0xE4 KEY_EXCHANGE request message format
  FINISH,                       // 0xE5 FINISH request message format
  PSK_EXCHANGE,                 // 0xE6 PSK_EXCHANGE request message format
  PSK_FINISH,                   // 0xE7 PSK_FINISH request message format
  HEARTBEAT,                    // 0xE8 HEARTBEAT request message format
  KEY_UPDATE,                   // 0xE9 KEY_UPDATE request message format
  GET_ENCAPSULATED_REQUEST,     // 0xEA GET_ENCAPSULATED_REQUEST request message format
  DELIVER_ENCAPSULATED_RESPONSE,// 0xEB DELIVER_ENCAPSULATED_RESPONSE request message format
  END_SESSION,                  // 0xEC END_SESSION request message format
  VENDOR_DEFINED_REQUEST = 254, // 0xFE VENDOR_DEFINED_REQUEST request message format
  RESPOND_IF_READY = 255,       // 0xFF RESPOND_IF_READY request message format
}

UINT32 enum SPDM_RESPONSE_CODES {
  DIGESTS = 1,                     // 0x01 GET_DIGESTS request message format
  CERTIFICATE = 2,                 // 0x02 GET_CERTIFICATE request message format
  CHALLENGE_AUTH = 3,              // 0x03 CHALLENGE request message format
  VERSION = 4,                     // 0x04 Successful VERSION response message format
  MEASUREMENTS = 96,               // 0x60 Successful MEASUREMENTS response message format
  CAPABILITIES = 97,               // 0x61 Successful CAPABILITIES response message format
  ALGORITHMS = 99,                 // 0x63 Successful ALGORITHMS response message format
  KEY_EXCHANGE_RSP,                // 0x64 Successful KEY_EXCHANGE_RSP response message format
  FINISH_RSP,                      // 0x65 Successful FINISH_RSP response message format
  PSK_EXCHANGE_RSP,                // 0x66 PSK_EXCHANGE_RSP response message format
  PSK_FINISH_RSP,                  // 0x67 Successful PSK_FINISH_RSP response message format
  HEARTBEAT_ACK,                   // 0x68 ENCAPSULATED_RESPONSE_ACK response message format
  KEY_UPDATE_ACK,                  // 0x69 KEY_UPDATE_ACK response message format
  ENCAPSULATED_REQUEST,            // 0x6A ENCAPSULATED_REQUEST response message format
  ENCAPSULATED_RESPONSE_ACK,       // 0x6B ENCAPSULATED_RESPONSE_ACK response message format
  END_SESSION_ACK,                 // 0x6C END_SESSION_ACK response message format
  VENDOR_DEFINED_RESPONSE = 126,   // 0x7E VENDOR_DEFINED_RESPONSE response message format
  ERROR = 127,                     // 0x7F ERROR response message format
}

UINT32 enum ERROR_CODE_AND_ERROR_DATA {
  InvalidRequest = 1,
  InvalidSession = 2,
  Busy = 3,
  UnexpectedRequest = 4,
  Unspecified = 5,
  DecryptError = 6,
  UnsupportedRequest = 7,
  RequestInFlight = 8,
  InvalidResponseCode = 9,
  SessionLimitExceeded = 10,
  MajorVersionMismatch = 65,
  ResponseNotReady = 66,
  RequestResynch = 67,
  Vendor = 255,
}

UINT32 enum KEY_UPDATE_OPERATIONS {
  UpdateKey = 1,
  UpdateAllKeys = 2,
  VerifyNewKey = 3,
}

entrypoint typedef struct _GET_VERSION_REQUEST_MESSAGE {
  UINT8 SPDMVersion;
  UINT8 RequestResponseCode { RequestResponseCode == 0x84 };
  UINT8 Param1;
  UINT8 Param2;
} GET_VERSION_REQUEST_MESSAGE;

entrypoint typedef struct _VersionNumberEntry {
  UINT8 Alpha : 4;
  UINT8 UpdateVersionNumber: 4; // Version of the specification with editorial updates but no functionality additions or changes. Informational; possible errata fixes. Ignore when checking versions for interoperability.
  UINT8 MinorVersion : 4; // Version of the specification with changes that are compatible with functions in earlier minor versions of this major version specification.
  UINT8 MajorVersion: 4;  // Version of the specification with changes that are incompatible with one or more functions in earlier major versions of the specification.
} VersionNumberEntry;

entrypoint typedef struct _SUCCESSFUL_VERSION_RESPONSE_MESSAGE {
  UINT8 SPDMVersion;
  UINT8 RequestResponseCode { RequestResponseCode == 0x04 };
  UINT8 Param1;
  UINT8 Param2;
  UINT8 Reserved;
  UINT8 VersionNumberEntryCount;
  VersionNumberEntry VersionNumberEntries[:byte-size sizeof(VersionNumberEntry)*VersionNumberEntryCount];
} SUCCESSFUL_VERSION_RESPONSE_MESSAGE;

entrypoint typedef struct _REQUESTER_FLAG {
  UINT8 Reserved : 1;
  UINT8 CERT_CAP : 1;
  UINT8 CHAL_CAP : 1;
  UINT8 MEAS_CAP : 2;
  UINT8 MEAS_FRESH_CAP : 1;
  UINT8 ENCRYPT_CAP : 1;
  UINT8 MAC_CAP : 1;
  UINT8 MUT_AUTH_CAP : 1;
  UINT8 KEY_EX_CAP : 1;
  UINT8 PSK_CAP : 2;
  UINT8 ENCAP_CAP : 1;
  UINT8 HBEAT_CAP : 1;
  UINT8 KEY_UPD_CAP : 1;
  UINT8 HANDSHAKE_IN_THE_CLEAR_CAP : 1;
  UINT8 PUB_KEY_ID_CAP : 1;
  UINT8 Reserved1 : 7;
  UINT8 Reserved2 : 8;
} REQUESTER_FLAG;

entrypoint typedef struct _GET_CPABILITIES_REQUEST_MESSAGE {
  UINT8 SPDMVersion;
  UINT8 RequestResponseCode { RequestResponseCode == 0xE1 };
  UINT8 Param1;
  UINT8 Param2;
  UINT8 Reserved;
  UINT8 CTExponent;
  UINT16 Reserved1;
  REQUESTER_FLAG Flags;
} GET_CPABILITIES_REQUEST_MESSAGE;

entrypoint typedef struct _RESPONDER_FLAG {
  UINT8 CACHE_CAP : 1;
  UINT8 CERT_CAP : 1;
  UINT8 CHAL_CAP : 1;
  UINT8 MEAS_CAP : 2;
  UINT8 MEAS_FRESH_CAP : 1;
  UINT8 ENCRYPT_CAP : 1;
  UINT8 MAC_CAP : 1;
  UINT8 MUT_AUTH_CAP : 1;
  UINT8 KEY_EX_CAP : 1;
  UINT8 PSK_CAP : 2;
  UINT8 ENCAP_CAP : 1;
  UINT8 HBEAT_CAP : 1;
  UINT8 KEY_UPD_CAP : 1;
  UINT8 HANDSHAKE_IN_THE_CLEAR_CAP : 1;
  UINT8 PUB_KEY_ID_CAP : 1;
  UINT8 Reserved1 : 7;
  UINT8 Reserved2 : 8;
} RESPONDER_FLAG;

entrypoint typedef struct _SUCCESSFUL_CPABILITIES_RESPONSE_MESSAGE {
  UINT8 SPDMVersion;
  UINT8 RequestResponseCode { RequestResponseCode == 0x61 };
  UINT8 Param1;
  UINT8 Param2;
  UINT8 Reserved;
  UINT8 CTExponent;
  UINT16 Reserved1;
  RESPONDER_FLAG Flags;
} SUCCESSFUL_CPABILITIES_RESPONSE_MESSAGE;

entrypoint typedef struct _EXTENDED_ALGORITHM_FIELD {
  UINT8 RegistryID;
  UINT8 Reserved;
  UINT16 AlgorithmID;
} EXTENDED_ALGORITHM_FIELD;

entrypoint typedef struct _DHE {
  UINT8 AlgType { AlgType == 0x2};
  UINT8 AlgCount;
  UINT16 AlgSupported;
  EXTENDED_ALGORITHM_FIELD AlgExternal[:byte-size sizeof(EXTENDED_ALGORITHM_FIELD)*(AlgCount & 0x0F)];
} DHE;

entrypoint typedef struct _AEAD {
  UINT8 AlgType { AlgType == 0x3};
  UINT8 AlgCount;
  UINT16 AlgSupported;
  EXTENDED_ALGORITHM_FIELD AlgExternal[:byte-size sizeof(EXTENDED_ALGORITHM_FIELD)*(AlgCount & 0x0F)];
} AEAD;

entrypoint typedef struct _ReqBaseAsymAlg {
  UINT8 AlgType { AlgType == 0x4};
  UINT8 AlgCount;
  UINT16 AlgSupported;
  EXTENDED_ALGORITHM_FIELD AlgExternal[:byte-size sizeof(EXTENDED_ALGORITHM_FIELD)*(AlgCount & 0x0F)];
} ReqBaseAsymAlg;

entrypoint typedef struct _KeySchedule {
  UINT8 AlgType { AlgType == 0x5};
  UINT8 AlgCount;
  UINT16 AlgSupported;
  EXTENDED_ALGORITHM_FIELD AlgExternal[:byte-size sizeof(EXTENDED_ALGORITHM_FIELD)*(AlgCount & 0x0F)];
} KeySchedule;

entrypoint typedef struct _NEGOTIATE_ALGORITHMS_REQUEST_MESSAGE {
  UINT8 SPDMVersion;
  UINT8 RequestResponseCode { RequestResponseCode == 0xE3 };
  UINT8 Param1;
  UINT8 Param2;
  UINT16 Length;
  UINT8 MeasurementSpecification;
  UINT8 Reserved;
  UINT32 BaseAsymAlgo;
  UINT32 BaseHashAlgo;
  UINT8 Reserved1[12];
  UINT8 ExtAsymCount;
  UINT8 ExtHashCount;
  UINT16 Reserved2;
  UINT32 ExtAsym[:byte-size sizeof(UINT32)*ExtAsymCount];
  UINT32 ExtHash[:byte-size sizeof(UINT32)*ExtHashCount];
  UINT8 ReqAlgStruct[:byte-size sizeof(DHE)+sizeof(AEAD)+sizeof(ReqBaseAsymAlg)+sizeof(KeySchedule)];
} NEGOTIATE_ALGORITHMS_REQUEST_MESSAGE;

entrypoint typedef struct _SUCCESSFUL_ALGORITHMS_RESPONSE_MESSAGE {
  UINT8 SPDMVersion;
  UINT8 RequestResponseCode { RequestResponseCode == 0x63 };
  UINT8 Param1;
  UINT8 Param2;
  UINT16 Length;
  UINT8 MeasurementSpecificationSel;
  UINT8 Reserved;
  UINT32 MeasurementHashAlgo;
  UINT32 BaseAsymSel;
  UINT32 BaseHashSel;
  UINT8 Reserved1[12];
  UINT8 ExtAsymSelCount ;
  UINT8 ExtHashSelCount;
  UINT16 Reserved2;
  UINT32 ExtAsym[:byte-size sizeof(UINT32)*ExtAsymSelCount];
  UINT32 ExtHash[:byte-size sizeof(UINT32)*ExtHashSelCount];
  UINT8 ReqAlgStruct[:byte-size sizeof(DHE)+sizeof(AEAD)+sizeof(ReqBaseAsymAlg)+sizeof(KeySchedule)];
} SUCCESSFUL_ALGORITHMS_RESPONSE_MESSAGE;

entrypoint typedef struct _GET_DIGESTS_REQUEST_MESSAGE {
  UINT8 SPDMVersion;
  UINT8 RequestResponseCode { RequestResponseCode == 0x81 };
  UINT8 Param1;
  UINT8 Param2; 
} GET_DIGESTS_REQUEST_MESSAGE;

entrypoint typedef struct _SUCCESSFUL_DIGESTS_RESPONSE_MESSAGE {
  UINT8 SPDMVersion;
  UINT8 RequestResponseCode;
  UINT8 Param1;
  UINT8 Param2;
  UINT8 Digest[:byte-size H*Param2];
} SUCCESSFUL_DIGESTS_RESPONSE_MESSAGE;

entrypoint typedef struct _GET_CERTIFICATE_REQUEST_MESSAGE {
  UINT8 SPDMVersion;
  UINT8 RequestResponseCode { RequestResponseCode == 0x82 };
  UINT8 Param1;
  UINT8 Param2;
  UINT16 Offset;
  UINT16 Length;
} GET_CERTIFICATE_REQUEST_MESSAGE;

entrypoint typedef struct _SUCCESSFUL_CERTIFICATE_RESPONSE_MESSAGE {
  UINT8 SPDMVersion;
  UINT8 RequestResponseCode { RequestResponseCode == 0x02 };
  UINT8 Param1;
  UINT8 Param2;
  UINT16 PortionLength;
  UINT8 CertChain[:byte-size PortionLength];
} SUCCESSFUL_CERTIFICATE_RESPONSE_MESSAGE;

entrypoint typedef struct _CHALLENGE_REQUEST_MESSAGE {
  UINT8 SPDMVersion;
  UINT8 RequestResponseCode { RequestResponseCode == 0x83 };
  UINT8 Param1;
  UINT8 Param2;
  UINT8 Nonce[32];
} CHALLENGE_REQUEST_MESSAGE;

entrypoint typedef struct _CHALLENGE_AUTH_RESPONSE_ATTRIBUTE {
  UINT8 SlotID : 4;
  UINT8 Reserved : 3;
  UINT8 BasicMutAuthReq : 1;
} CHALLENGE_AUTH_RESPONSE_ATTRIBUTE;

entrypoint typedef struct _SUCCESSFUL_CHALLENGE_AUTH_RESPONSE_MESSAGE {
  UINT8 SPDMVersion;
  UINT8 RequestResponseCode { RequestResponseCode == 0x03 };
  CHALLENGE_AUTH_RESPONSE_ATTRIBUTE Param1;
  UINT8 Param2;
  UINT8 CertChainHash[H];
  UINT8 Nonce[32];
  UINT8 MeasurementSummaryHash[H];
  UINT16 OpaqueLength;
  UINT8 OpaqueData[OpaqueLength];
  UINT8 Signature[S];
} SUCCESSFUL_CHALLENGE_AUTH_RESPONSE_MESSAGE;

entrypoint typedef struct _GET_MEASUREMENTS_REQUEST_MESSAGE {
  UINT8 SPDMVersion;
  UINT8 RequestResponseCode { RequestResponseCode == 0xE0 };
  UINT8 Param1;
  UINT8 Param2;
  UINT8 Nonce[32];
  UINT8 SlotIDParam;
} GET_MEASUREMENTS_REQUEST_MESSAGE;

entrypoint typedef struct _SUCCESSFUL_MEASUREMENTS_RESPONSE_MESSAGE {
  UINT8 SPDMVersion;
  UINT8 RequestResponseCode { RequestResponseCode == 0x60 };
  UINT8 Param1;
  UINT8 Param2;
  UINT8 NumberOfBlocks;
  UINT32 MeasurementRecordLength; // it should be UINT24, but 3D doesn't support UINT24
  UINT8 MeasurementRecord[MeasurementRecordLength];
  UINT8 Nonce[32];
  UINT16 OpaqueLength;
  UINT8 OpaqueData[OpaqueLength];
  UINT8 Signature[S];
} SUCCESSFUL_MEASUREMENTS_RESPONSE_MESSAGE;

entrypoint typedef struct _ERROR_RESPONSE_MESSAGE {
  UINT8 SPDMVersion;
  UINT8 RequestResponseCode { RequestResponseCode == 0x7F };
  UINT8 Param1;
  UINT8 Param2;
  UINT8 ExtendedErrorData[:byte-size-at-most 32];
} ERROR_RESPONSE_MESSAGE;

entrypoint typedef struct _RESPONSENOTREADY_EXTENDED_ERROR_DATA {
  UINT8 RDTExponent;
  UINT8 RequestCode;
  UINT8 Token;
  UINT8 RDTM;
} RESPONSENOTREADY_EXTENDED_ERROR_DATA;

entrypoint typedef struct _EXTENDERRORDATA_FOR_VENDOR (UINT32 Variable)  {
  UINT8 Len;
  UINT8 VendorID[Len];
  UINT8 OpaqueErrorData[:byte-size-single-element-array Variable]; // Defined by the vendor or other standards
} EXTENDERRORDATA_FOR_VENDOR;

entrypoint typedef struct _RESPOND_IF_READY_REQUEST_MESSAGE {
  UINT8 SPDMVersion;
  UINT8 RequestResponseCode { RequestResponseCode == 0xFF };
  UINT8 Param1;
  UINT8 Param2;
} RESPOND_IF_READY_REQUEST_MESSAGE;

entrypoint typedef struct _VENDOR_DEFINED_REQUEST_REQUEST_MESSAGE {
  UINT8 SPDMVersion;
  UINT8 RequestResponseCode { RequestResponseCode == 0xFE };
  UINT8 Param1;
  UINT8 Param2;
  UINT16 StandardID;
  UINT8 Len;
  UINT8 VendorID[:byte-size Len];
  UINT16 ReqLength;
  UINT8 VendorDefinedReqPayload[:byte-size ReqLength];
} VENDOR_DEFINED_REQUEST_REQUEST_MESSAGE;

entrypoint typedef struct _VENDOR_DEFINED_RESPONSE_RESPONSE_MESSAGE {
  UINT8 SPDMVersion;
  UINT8 RequestResponseCode { RequestResponseCode == 0x7E };
  UINT8 Param1;
  UINT8 Param2;
  UINT16 StandardID;
  UINT8 Len;
  UINT8 VendorID[:byte-size Len];
  UINT16 RespLength;
  UINT8 VendorDefinedRespPayload[:byte-size RespLength];
} VENDOR_DEFINED_RESPONSE_RESPONSE_MESSAGE;

entrypoint typedef struct _KEY_EXCHANGE_REQUEST_MESSAGE (UINT32 D) {
  UINT8 SPDMVersion;
  UINT8 RequestResponseCode { RequestResponseCode == 0xE4 };
  UINT8 Param1;
  UINT8 Param2;
  UINT16 ReqSessionID;
  UINT16 Reserved;
  UINT8 RandomData[32];
  UINT8 ExchangeData[D];
  UINT16 OpaqueDataLength;
  UINT8 OpaqueData[:byte-size OpaqueDataLength];
} KEY_EXCHANGE_REQUEST_MESSAGE;

entrypoint typedef struct _SUCCESSFUL_KEY_EXCHANGE_RSP_RESPONSE_MESSAGE (UINT32 D) {
  UINT8 SPDMVersion;
  UINT8 RequestResponseCode { RequestResponseCode == 0x64 };
  UINT8 Param1;
  UINT8 Param2;
  UINT16 ReqSessionID;
  UINT8 MutAuthRequested;
  UINT8 SlotIDParam;
  UINT8 RandomData[32];
  UINT8 ExchangeData[D];
  UINT8 MeasurementSummaryHash[H];
  UINT16 OpaqueDataLength;
  UINT8 OpaqueData[:byte-size OpaqueDataLength];
  UINT8 Signature[S];
  UINT8 ResponderVerifyData[H];
} SUCCESSFUL_KEY_EXCHANGE_RSP_RESPONSE_MESSAG;

entrypoint typedef struct _FINISH_REQUEST_MESSAGE {
  UINT8 SPDMVersion;
  UINT8 RequestResponseCode { RequestResponseCode == 0xE5 };
  UINT8 Param1;
  UINT8 Param2;
  UINT8 Signature[S];
  UINT8 RequesterVerifyData[H];
} FINISH_REQUEST_MESSAGE;

entrypoint typedef struct _SUCCESSFUL_FINISH_RESPONSE_MESSAGE {
  UINT8 SPDMVersion;
  UINT8 RequestResponseCode { RequestResponseCode == 0x65 };
  UINT8 Param1;
  UINT8 Param2;
  UINT8 RequesterVerifyData[H];
} SUCCESSFUL_FINISH_RESPONSE_MESSAGE;

entrypoint typedef struct _PSK_EXCHANGE_REQUEST_MESSAGE {
  UINT8 SPDMVersion;
  UINT8 RequestResponseCode { RequestResponseCode == 0xE6 };
  UINT8 Param1;
  UINT8 Param2;
  UINT16 ReqSessionID;
  UINT16 P;
  UINT16 R;
  UINT16 OpaqueDataLength;
  UINT8 PSKHint[P];
  UINT8 RequesterContext[R];
  UINT8 OpaqueData[OpaqueDataLength];
} PSK_EXCHANGE_REQUEST_MESSAGE;

entrypoint typedef struct _PSK_EXCHANGE_RSP_RESPONSE_MESSAGE {
  UINT8 SPDMVersion;
  UINT8 RequestResponseCode { RequestResponseCode == 0x66 };
  UINT8 Param1;
  UINT8 Param2;
  UINT16 RspSessionID;
  UINT16 Reserved ;
  UINT16 Q;
  UINT16 OpaqueDataLength;
  UINT8 MeasurementSummaryHash[H];
  UINT8 ResponderContext[Q];
  UINT8 OpaqueData[OpaqueDataLength];
  UINT8 ResponderVerifyData[H];
} PSK_EXCHANGE_RSP_RESPONSE_MESSAGE;

entrypoint typedef struct _PSK_FINISH_REQUEST_MESSAGE {
  UINT8 SPDMVersion;
  UINT8 RequestResponseCode { RequestResponseCode == 0xE7 };
  UINT8 Param1;
  UINT8 Param2;
  UINT8 RequesterVerifyData[H];
} PSK_FINISH_REQUEST_MESSAGE;

entrypoint typedef struct _SUCCESSFUL_PSK_FINISH_RSP_RESPONSE_MESSAGE {
  UINT8 SPDMVersion;
  UINT8 RequestResponseCode { RequestResponseCode == 0x67 };
  UINT8 Param1;
  UINT8 Param2;
} SUCCESSFUL_PSK_FINISH_RSP_RESPONSE_MESSAGE;

entrypoint typedef struct _HEARTBEAT_REQUEST_MESSAGE {
  UINT8 SPDMVersion;
  UINT8 RequestResponseCode { RequestResponseCode == 0xE8 };
  UINT8 Param1;
  UINT8 Param2;
} HEARTBEAT_REQUEST_MESSAGE;

entrypoint typedef struct _HEARTBEAT_ACK_RESPONSE_MESSAGE {
  UINT8 SPDMVersion;
  UINT8 RequestResponseCode { RequestResponseCode == 0x68 };
  UINT8 Param1;
  UINT8 Param2;
} HEARTBEAT_ACK_RESPONSE_MESSAGE;

entrypoint typedef struct _KEY_UPDATE_REQUEST_MESSAGE {
  UINT8 SPDMVersion;
  UINT8 RequestResponseCode { RequestResponseCode == 0xE9 };
  UINT8 Param1;
  UINT8 Param2;
} KEY_UPDATE_REQUEST_MESSAGE;

entrypoint typedef struct _KEY_UPDATE_ACK_RESPONSE_MESSAGE {
  UINT8 SPDMVersion;
  UINT8 RequestResponseCode { RequestResponseCode == 0x69 };
  UINT8 Param1;
  UINT8 Param2;
} KEY_UPDATE_ACK_RESPONSE_MESSAGE;

entrypoint typedef struct _GET_ENCAPSULATED_REQUEST_REQUEST_MESSAGE {
  UINT8 SPDMVersion;
  UINT8 RequestResponseCode { RequestResponseCode == 0xEA };
  UINT8 Param1;
  UINT8 Param2;
} GET_ENCAPSULATED_REQUEST_REQUEST_MESSAGE;

entrypoint typedef struct _ENCAPSULATED_REQUEST_RESPONSE_MESSAGE (UINT32 Variable) {
  UINT8 SPDMVersion;
  UINT8 RequestResponseCode { RequestResponseCode == 0x6A };
  UINT8 Param1;
  UINT8 Param2;
  UINT8 EncapsulatedRequest[:byte-size-single-element-array Variable];
} ENCAPSULATED_REQUEST_RESPONSE_MESSAGE;

entrypoint typedef struct _DELIVER_ENCAPSULATED_RESPONSE_REQUEST_MESSAGE (UINT32 Variable) {
  UINT8 SPDMVersion;
  UINT8 RequestResponseCode { RequestResponseCode == 0xEB };
  UINT8 Param1;
  UINT8 Param2;
  UINT8 EncapsulatedResponse[:byte-size-single-element-array Variable];
} DELIVER_ENCAPSULATED_RESPONSE_REQUEST_MESSAGE;

entrypoint typedef struct _ENCAPSULATED_RESPONSE_ACK_RESPONSE_MESSAGE (UINT32 Variable) {
  UINT8 SPDMVersion;
  UINT8 RequestResponseCode { RequestResponseCode == 0x6B };
  UINT8 Param1;
  UINT8 Param2;
  UINT8 EncapsulatedRequest[:byte-size-single-element-array Variable];
} ENCAPSULATED_RESPONSE_ACK_RESPONSE_MESSAGE;

entrypoint typedef struct _END_SESSION_REQUEST_MESSAGE {
  UINT8 SPDMVersion;
  UINT8 RequestResponseCode { RequestResponseCode == 0xEC };
  UINT8 Param1;
  UINT8 Param2;
} END_SESSION_REQUEST_MESSAGE;

entrypoint typedef struct _END_SESSION_ACK_RESPONSE_MESSAGE {
  UINT8 SPDMVersion;
  UINT8 RequestResponseCode { RequestResponseCode == 0x6C };
  UINT8 Param1;
  UINT8 Param2;
} END_SESSION_ACK_RESPONSE_MESSAGE;