/*++

Copyright (c) Microsoft Corporation

Module Name:

EverParse.h

Abstract:

This is an EverParse-generated file that contains common auxiliary
functions for EverParse-generated verified data validators.

This file was generated by EverParse v2020.10.23

Authors:

nswamy, protz, taramana 5-Feb-2020

--*/


#ifndef __EverParse_H
#define __EverParse_H

#if defined(__cplusplus)
extern "C"
{
#endif

#include "EverParseEndianness.h"

#define EVERPARSE_MAX_UINT32 ((uint32_t)4294967295U)

#define EVERPARSE_MAX_UINT32_AS_UINT64 ((uint64_t)4294967295U)

#define EVERPARSE_VALIDATOR_MAX_LENGTH ((uint64_t)4294967295U)

    static inline BOOLEAN
    EverParseIsError(uint64_t PositionOrError)
    {
        return PositionOrError > EVERPARSE_VALIDATOR_MAX_LENGTH;
    }

    static inline BOOLEAN
    EverParseIsSuccess(uint64_t PositionOrError)
    {
        return PositionOrError <= EVERPARSE_VALIDATOR_MAX_LENGTH;
    }

    typedef uint64_t EverParse_validator_error;

    typedef uint64_t EverParsePosT;

    static inline uint64_t
    EverParseSetValidatorErrorPos(uint64_t Error, uint64_t Position)
    {
        return (Error & (uint64_t)18446744069414584320U) | Position
                                                               << (uint32_t)0U;
    }

    static inline uint64_t
    EverParseGetValidatorErrorPos(uint64_t X)
    {
        return (X & (uint64_t)4294967295U) >> (uint32_t)0U;
    }

    static inline uint64_t
    EverParseSetValidatorErrorKind(uint64_t Error, uint64_t Code)
    {
        return (Error & (uint64_t)18446673709260341247U) | Code
                                                               << (uint32_t)32U;
    }

    static inline uint64_t
    EverParseGetValidatorErrorKind(uint64_t Error)
    {
        return (Error & (uint64_t)70364449210368U) >> (uint32_t)32U;
    }

    typedef uint64_t EverParseErrorCode;

    static inline uint64_t
    EverParseSetValidatorErrorCode(uint64_t Error, uint64_t Code)
    {
        return (Error & (uint64_t)281474976710655U) | Code << (uint32_t)48U;
    }

    static inline uint64_t
    EverParseGetValidatorErrorCode(uint64_t Error)
    {
        return (Error & (uint64_t)18446462598732840960U) >> (uint32_t)48U;
    }

#define EVERPARSE_VALIDATOR_ERROR_GENERIC ((uint64_t)4294967296U)

#define EVERPARSE_VALIDATOR_ERROR_NOT_ENOUGH_DATA ((uint64_t)8589934592U)

    static inline uint64_t
    EverParseSetValidatorErrorPosAndCode(
        uint64_t Error,
        uint64_t Position,
        uint64_t Code)
    {
        return EverParseSetValidatorErrorPos(
            EverParseSetValidatorErrorCode(Error, Code), Position);
    }

    static inline uint64_t
    EverParseMaybeSetValidatorErrorPosAndCode(
        uint64_t Error,
        uint64_t Pos,
        uint64_t C)
    {
        if (EverParseGetValidatorErrorCode(Error) == (uint64_t)0U)
        {
            return EverParseSetValidatorErrorPosAndCode(Error, Pos, C);
        }
        return Error;
    }

    static inline uint64_t
    EverParseMaybeSetErrorCode(
        uint64_t PositionOrError,
        uint64_t PositionAtError,
        uint64_t Code)
    {
        if (EverParseIsError(PositionOrError) &&
            EverParseGetValidatorErrorCode(PositionOrError) == (uint64_t)0U)
        {
            return EverParseSetValidatorErrorPosAndCode(
                PositionOrError, PositionAtError, Code);
        }
        return PositionOrError;
    }

    typedef struct InputBuffer_s
    {
        uint8_t *base;
        uint32_t len;
    } InputBuffer;

    static inline uint32_t
    EverParseGetBitfield32(uint32_t Value, uint32_t BitsFrom, uint32_t BitsTo)
    {
        return Value << ((uint32_t)32U - BitsTo) >>
               ((uint32_t)32U - BitsTo + BitsFrom);
    }

    static inline uint64_t
    EverParseGetBitfield64(uint64_t Value, uint32_t BitsFrom, uint32_t BitsTo)
    {
        return Value << ((uint32_t)64U - BitsTo) >>
               ((uint32_t)64U - BitsTo + BitsFrom);
    }

    typedef uint64_t EverParseResult;

    typedef uint64_t EverParseFieldId;

    static inline uint64_t
    EverParseFieldIdOfResult(uint64_t Result1)
    {
        return EverParseGetValidatorErrorCode(Result1);
    }

    static inline BOOLEAN
    EverParseResultIsError(uint64_t Result1)
    {
        return Result1 > EVERPARSE_VALIDATOR_MAX_LENGTH;
    }

    static inline uint64_t
    EverParseErrorKindOfResult(uint64_t Result1)
    {
        return EverParseGetValidatorErrorKind(Result1);
    }

    static inline EverParseString
    EverParseErrorReasonOfResult(uint64_t Code)
    {
        switch (EverParseErrorKindOfResult(Code))
        {
        case 1U: {
            return "generic error";
        }
        case 2U: {
            return "not enough data";
        }
        case 3U: {
            return "impossible";
        }
        case 4U: {
            return "list size not multiple of element size";
        }
        case 5U: {
            return "action failed";
        }
        case 6U: {
            return "constraint failed";
        }
        case 7U: {
            return "unexpected padding";
        }
        default: {
            return "unspecified";
        }
        }
    }

#define EVERPARSE_VALIDATOR_ERROR_IMPOSSIBLE ((uint64_t)12884901888U)

#define EVERPARSE_VALIDATOR_ERROR_LIST_SIZE_NOT_MULTIPLE                       \
    ((uint64_t)17179869184U)

#define EVERPARSE_VALIDATOR_ERROR_ACTION_FAILED ((uint64_t)21474836480U)

#define EVERPARSE_VALIDATOR_ERROR_CONSTRAINT_FAILED ((uint64_t)25769803776U)

#define EVERPARSE_VALIDATOR_ERROR_UNEXPECTED_PADDING ((uint64_t)30064771072U)

    static inline uint64_t
    EverParseCheckConstraintOk(BOOLEAN Ok, uint64_t Position)
    {
        if (Ok)
        {
            return Position;
        }
        return EVERPARSE_VALIDATOR_ERROR_CONSTRAINT_FAILED;
    }

    static inline uint64_t
    EverParseCheckConstraintOkWithFieldId(
        BOOLEAN Ok,
        uint64_t StartPosition,
        uint64_t EndPosition,
        uint64_t FieldId)
    {
        if (Ok)
        {
            return EndPosition;
        }
        return EverParseSetValidatorErrorPosAndCode(
            EVERPARSE_VALIDATOR_ERROR_CONSTRAINT_FAILED,
            StartPosition,
            FieldId);
    }

    static inline BOOLEAN
    EverParseIsRangeOkay(uint32_t Size, uint32_t Offset, uint32_t AccessSize)
    {
        return Size >= AccessSize && (Size - AccessSize) >= Offset;
    }

#if defined(__cplusplus)
}
#endif

#define __EverParse_H_DEFINED
#endif
